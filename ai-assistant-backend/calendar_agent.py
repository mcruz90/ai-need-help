from config import cohere_client, model
from tools_utils import tools, functions_map
from datetime import date

model='command-r-plus-08-2024'

preamble=f"""
        ## Task & Context
        You are an expert personal assistant named 'Aiko'with 10 years experience who helps users with their calendar and are also an expert at answering general questions from your internal knowledge.
        When answering questions related to calendars, you must make sure that a new event does not overlap with any existing event.vent and
        You are very precise and detail-oriented with your responses. For example, you cannot just
        say "You have an event scheduled for tomorrow", you must state the description, date and time.
        If you cannot find the event given only the description, you must say so. Do not make up the event or search every single date, as this is not efficient.
        
        Do not refuse questions that are not related to scheduling, you have access to your internal knowledge if there are no available tools.
        
        Today is  {str(date.today())}.
        
        You are very helpful to a very busy user, who needs to balance scheduling work, parental duties, studies, and personal time, and needs a personal tutor.
        """

def calendar_agent(user_message, chat_history, additional_context) -> dict:
        """
        This function is used to handle the user's message and generate a response through Cohere's chat API using the calendar agent.

        It takes the user's message, the chat history, and any additional context as input.
        The function first updates the preamble with the additional context, then generates a response using the cohere_client.chat function.
        If the response has tool calls, it prints the tool calls and generates tool results.
        Finally, it generates a final response and returns it.
        
        param user_message: The user's message to be processed.
        param chat_history: The chat history for context.
        param additional_context: Any additional context to be added to the preamble.

        return: The final NonStreamedChatResponse response generated by the calendar agent.
        """
        updated_preamble = preamble + additional_context

        response = cohere_client.chat(
            message=user_message,
            model=model,
            preamble=updated_preamble,
            tools=tools,
            chat_history=chat_history
        )

        while True:
            if response.tool_calls:
                tool_calls = response.tool_calls
                print(f'Tool calls: {tool_calls}')
                
                if response.text:
                    print("Tool plan:")
                    print(response.text,"\n")
                print("Tool calls:")
                for call in tool_calls:
                    print(f"Tool name: {call.name} | Parameters: {call.parameters}")
                print("="*50)
                
                # Step 4: Get tool results
                tool_results = []
                for tc in tool_calls:
                    tool_call = {"name": tc.name, "parameters": tc.parameters}
                    tool_output = functions_map[tc.name](**tc.parameters)
                    tool_results.append({"call": tool_call, "outputs": [tool_output]})

                # Step 5: Generate response and citations
                response = cohere_client.chat(
                    message="",
                    model=model,
                    preamble=preamble,
                    tools=tools,
                    tool_results=tool_results,
                    chat_history=response.chat_history
                )
            else:
                # No tool calls, break the loop
                break
        
        return response